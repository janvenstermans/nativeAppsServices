package com.tile.janv.redditviewer.model;

import com.tile.janv.redditviewer.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "REDDIT_POST".
 */
public class RedditPost {

    private Long id;
    private String redditId;
    private String title;
    private String author;
    private String link;
    private String thumbnail;
    private String permalink;
    private Long subredditId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RedditPostDao myDao;

    private Subreddit subreddit;
    private Long subreddit__resolvedKey;


    public RedditPost() {
    }

    public RedditPost(Long id) {
        this.id = id;
    }

    public RedditPost(Long id, String redditId, String title, String author, String link, String thumbnail, String permalink, Long subredditId) {
        this.id = id;
        this.redditId = redditId;
        this.title = title;
        this.author = author;
        this.link = link;
        this.thumbnail = thumbnail;
        this.permalink = permalink;
        this.subredditId = subredditId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRedditPostDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRedditId() {
        return redditId;
    }

    public void setRedditId(String redditId) {
        this.redditId = redditId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public String getThumbnail() {
        return thumbnail;
    }

    public void setThumbnail(String thumbnail) {
        this.thumbnail = thumbnail;
    }

    public String getPermalink() {
        return permalink;
    }

    public void setPermalink(String permalink) {
        this.permalink = permalink;
    }

    public Long getSubredditId() {
        return subredditId;
    }

    public void setSubredditId(Long subredditId) {
        this.subredditId = subredditId;
    }

    /** To-one relationship, resolved on first access. */
    public Subreddit getSubreddit() {
        Long __key = this.subredditId;
        if (subreddit__resolvedKey == null || !subreddit__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubredditDao targetDao = daoSession.getSubredditDao();
            Subreddit subredditNew = targetDao.load(__key);
            synchronized (this) {
                subreddit = subredditNew;
            	subreddit__resolvedKey = __key;
            }
        }
        return subreddit;
    }

    public void setSubreddit(Subreddit subreddit) {
        synchronized (this) {
            this.subreddit = subreddit;
            subredditId = subreddit == null ? null : subreddit.getId();
            subreddit__resolvedKey = subredditId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
